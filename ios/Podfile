# coding: utf-8
Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require 'xcodeproj'

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods', :deterministic_uuids => false

prepare_react_native_project!

target 'soundscape' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"]
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  if podfile_properties['ios.useFrameworks']
    use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym
  end
  if ENV['USE_FRAMEWORKS']
    use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym
  end

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'].nil? || podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false'
  )

  post_install do |installer|
    # 1) Standard React Native post-install
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true'
    )

    # 2) Prevent resource bundles being code-signed on Xcode 14+
    installer.target_installation_results.pod_target_installation_results.each do |_pod, result|
      result.resource_bundle_targets.each do |bundle|
        bundle.build_configurations.each do |cfg|
          cfg.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

    # 3) Silence the Hermes “script has no outputs” warning
    installer.pods_project.targets.each do |t|
      next unless t.name == 'hermes-engine'
      t.build_phases.each do |phase|
        if phase.respond_to?(:name) && phase.name.include?('Replace Hermes')
          phase.input_paths  = []
          phase.output_paths = []
        end
      end
    end

    # 4) Patch SafeAreaContext C++ for the new StyleLength API
    pods_root = installer.sandbox.root.to_s
    cpp_file = File.join(
      pods_root,
      'react-native-safe-area-context',
      'common', 'cpp',
      'react', 'renderer',
      'components', 'safeareacontext',
      'RNCSafeAreaViewShadowNode.cpp'
    )
    if File.exist?(cpp_file)
      src = File.read(cpp_file)
      patched = src.gsub(/arg\.value\.unit,\s*arg\.value\.value/, 'arg.unit, arg.value')
      File.write(cpp_file, patched)
    end

    # 5) Unify DEFINES_MODULE across conflicting pods
    %w[expo-dev-menu Main ReactNativeCompatibles SafeAreaView Vendored].each do |name|
      installer.pods_project.targets.select { |x| x.name == name }.each do |tgt|
        tgt.build_configurations.each { |cfg| cfg.build_settings['DEFINES_MODULE'] = 'YES' }
      end
    end

    # 6) Silence the Expo “[Expo] Configure project” script phase in the main Xcode project
    project_path = File.join(installer.sandbox.root.parent.to_s, 'soundscape.xcodeproj')
    if File.exist?(project_path)
      project = Xcodeproj::Project.open(project_path)
      project.targets.each do |t|
        next unless t.name == 'soundscape'
        t.build_phases.grep(Xcodeproj::Project::Object::PBXShellScriptBuildPhase).each do |phase|
          if phase.name.include?('Configure project')
            phase.input_paths  = []
            phase.output_paths = []
          end
        end
      end
      project.save
    end
  end
end
